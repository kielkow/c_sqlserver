-> create database;
create database db_example;

-> use database
use db_example;

-> Create a database in a specific dir with size, max-size and filegrowth
create database db_example
on (name=db_example_dat, filename = 'c:\temp\data\db_example', size=10, maxsize=50, filegrowth=5);

-> Create a database in a specific dir with size, max-size and filegrowth and generate log
create database db_example
on (name=db_example_dat, filename = 'c:\temp\data\db_example.mdf', size=10, maxsize=50, filegrowth=5)
log on (name=db_example_dat, filename = 'c:\temp\data\db_example.ldf', size=10, maxsize=50, filegrowth=5)

-> Delete a database
drop database db_example;

-> Create table
create table [customers] (
	[cpf] [varchar] (11), 
	[name] [varchar] (150), 
	[address] [varchar] (150),
	[address detail] [varchar] (150),
	[street] [varchar] (150),
	[community] [varchar] (50),
	[city] [varchar] (50),
	[state] [varchar] (2),
	[CEP] [varchar] (8),
	[dt_born] [date], 
	[age] [smallint], 
	[sex] [varchar] (1),
	[credit limit] [money],
	[minim vol sucos] [float],
	[first buy] [bit]
)

-> Delete table
drop table [tb_example];

-> Execute command sql
go
...script

-> insert value on table
insert into dbo.products
([cod product], [name product], [embalagem], [size], [taste], [price])
values 
('1A4BAG67A0', 'orange juice', 'plastic', '350ml', 'orange', 4.67);

-> select data from table
select * from dbo.table_example;

-> update data
update table_example set
[column1] = 'newValue1',
[column2] = 'newValue2'
where [id] = 1;

-> delete data
delete from table_example
where id = 1;

-> alter column to not accept null
alter table [table]
alter column [cod column] 
varchar(10) not null

-> Add primary key on table
alter table [table]
add constraint pk_column
PRIMARY KEY CLUSTERED ([id_column]);

-> insert date and logic values on table
update [dbo].[providers] set
[date admission] = '2017-03-18',
[holiday] = 1
where [key] = '00238' OR [key] = '00265';

-> select itens from table
select
	[name],
	[payment],
	[date admission],
	[holiday]
FROM [dbo].[providers];

-> select top 1000 itens from table
select top(1000) 
	[name],
	[payment],
	[date admission],
	[holiday]
FROM [dbo].[providers];

-> Rename column on select
select
	[name] as nome,
	[payment] as comissao,
	[date admission] as data_admissao,
	[holiday] as ferias
FROM [dbo].[providers];

-> select itens from table using where
select
	[name] as nome,
	[payment] as comissao,
	[date admission] as data_admissao,
	[holiday] as ferias
from [dbo].[providers]
where [name] = 'Matheus Kielkowski';

-> delete itens from table using where
delete from [dbo].[providers] 
where [holiday] = 1;

-> Bigger, lower, equal and different
select * from [dbo].[products] where price > 5; -> bigger than
select * from [dbo].[providers] where [name] > 'Matheus Kielkowski';
select * from [dbo].[products] where price < 5; -> lower than
select * from [dbo].[providers] where [name] < 'Matheus Kielkowski';

select * from [dbo].[products] where price >= 5; -> bigger or equal
select * from [dbo].[products] where price <= 5; -> lower or equal

select * from [dbo].[products] where price <> 5; -> different than 5

-> Filter data by date
select * from [dbo].[providers] where [date admission] > '2000-01-01';
select * from [dbo].[providers] where [date admission] >= '2000-01-01';
select * from [dbo].[providers] where [date admission] = '2000-01-01';
select * from [dbo].[providers] where [date admission] < '2000-01-01';
select * from [dbo].[providers] where [date admission] <= '2000-01-01';
select * from [dbo].[providers] where [date admission] <> '2000-01-01';

-> Filter date by year, month or day
select * from [dbo].[providers] where year([date admission]) = 2000;
select * from [dbo].[providers] where month([date admission]) = 9;
select * from [dbo].[providers] where day([date admission]) = 10;

-> selects with AND/OR/NOT
select * from [table] where [x] = 'A' OR [y] = 'B';
select * from [table] where [x] = 'A' AND [y] = 'B';
select * from [table] where not([x] = 'A' OR [y] = 'B');

-> select with IN and BETWEEN
select * from [table] where [x] in (1,2,3,4,5);
select * from [table] where [x] not in (1,2,3,4,5);
select * from [table] where [x] between 10 and 30;

-> select with LIKE
select * from [table] where [x] like '%test%'; -> get anywhere
select * from [table] where [x] like '%test'; -> get in the end
select * from [table] where [x] like 'test%'; -> get in the start

-> select with DISTINCT (avoid repetitions items)
select distinct * from [table];
select distinct [x], [y] from [table]; -> x and y no repetitions
select distinct top 3 * from [table]; -> select top 3 distinct

-> order items
select * from [table] order by campo;
select * from [table] order by campo asc;
select * from [table] order by campo desc;
select * from [table] order by campo1, campo2;
select * from [table] order by campo1 desc, campo2 desc;

-> MAX, MIN, SUM, AVG, COUNT
select SUM(x) from [table];
select MIN(x) from [table];
select MAX(x) from [table];
select AVG(x) from [table];
select COUNT(x) from [table];

-> GROUP BY
select * from [table] group by [field];
select x, SUM(y) from [table] group by x;
select x, MAX(y) from [table] group by x;
select x, MIN(y) from [table] group by x;
select x, AVG(y) from [table] group by x;
select x, COUNT(y) from [table] group by x;
select x, SUM(y) from [table] where z = 1 group by x;
select x, z, SUM(y) from [table] where z = 1 group by x, z;
select x, SUM(y) from [table] where z = 1 group by x order by x desc;
select YEAR(data) from [table] group by YEAR(data);

-> HAVING 
select x, SUM(y) from [table] group by x having SUM(y) >= 6;
select a, b, SUM(c) as C from [table] 
where [b] =  'SP' 
group by a, b having SUM(c) >= 140000;

-> CASE WHEN
select test, 
	case 
		when x >= 8 and y <= 10 then 'Excelent'
		when x >= 6 and y <= 8 then 'Good'
		when x >= 5 and y <= 6 then 'OK'
		else 'bad'
	end
from [table];
select test, 
	case 
		when x >= 8 and y <= 10 then 'Excelent'
		when x >= 6 and y <= 8 then 'Good'
		when x >= 5 and y <= 6 then 'OK'
		else 'bad'
	end,
	AVG(x+y)
from [table];
SELECT [NOME DO PRODUTO],
   CASE 
     WHEN [PREÇO DE LISTA] >= 12 THEN 'PRODUTO CARO'
     WHEN [PREÇO DE LISTA] >= 7 AND [PREÇO DE LISTA] < 12 THEN 'PRODUTO EM CONTA'
     ELSE 'PRODUTO BARATO' 
   END,
AVG([PREÇO DE LISTA])
FROM
[TABELA DE PRODUTOS]
GROUP BY [NOME DO PRODUTO],
  CASE 
    WHEN [PREÇO DE LISTA] >= 12 THEN 'PRODUTO CARO'
    WHEN [PREÇO DE LISTA] >= 7 AND [PREÇO DE LISTA] < 12 THEN 'PRODUTO EM CONTA'
    ELSE 'PRODUTO BARATO' 
END;

-> INNER JOIN
select table_x.name, table_x.cod_name from table_x
inner join table_y 
on table_x.cod_name = table_y.cod_name;

-> INNER JOIN WITH ALIASES
select x.name, x.cod_name from table_x as x
inner join table_y as y
on x.cod_name = y.cod_name;

SELECT * FROM [TABELA DE VENDEDORES] A INNER JOIN 
[NOTAS FISCAIS] B ON A.MATRICULA = B.MATRICULA

SELECT [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].[NOME], COUNT(*) 
FROM [TABELA DE VENDEDORES] INNER JOIN 
[NOTAS FISCAIS] ON [TABELA DE VENDEDORES].MATRICULA = [NOTAS FISCAIS].MATRICULA
GROUP BY [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].[NOME]

SELECT [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].[NOME], YEAR(DATA), 
COUNT(*) FROM [TABELA DE VENDEDORES] INNER JOIN 
[NOTAS FISCAIS] ON [TABELA DE VENDEDORES].MATRICULA = [NOTAS FISCAIS].MATRICULA
GROUP BY [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].[NOME], YEAR(DATA)

SELECT [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].[NOME], YEAR(DATA), 
COUNT(*) FROM [TABELA DE VENDEDORES] INNER JOIN 
[NOTAS FISCAIS] ON [TABELA DE VENDEDORES].MATRICULA = [NOTAS FISCAIS].MATRICULA
GROUP BY [TABELA DE VENDEDORES].MATRICULA, [TABELA DE VENDEDORES].[NOME], YEAR(DATA)
ORDER BY YEAR(DATA), [TABELA DE VENDEDORES].[NOME]

-> LEFT JOIN
select col from table1 left join table2 on table1.col = table2.col;
select col from table1 left join table2 
on table1.col = table2.col 
where table2.col is null;

SELECT [TABELA DE CLIENTES].[NOME], COUNT(*) FROM [TABELA DE CLIENTES] LEFT JOIN 
[NOTAS FISCAIS] ON [TABELA DE CLIENTES].CPF = [NOTAS FISCAIS].CPF
GROUP BY [TABELA DE CLIENTES].[NOME]

SELECT [TABELA DE CLIENTES].[CPF], [TABELA DE CLIENTES].[NOME], COUNT(*) FROM [TABELA DE CLIENTES] LEFT JOIN 
[NOTAS FISCAIS] ON [TABELA DE CLIENTES].CPF = [NOTAS FISCAIS].CPF
GROUP BY  [TABELA DE CLIENTES].[CPF], [TABELA DE CLIENTES].[NOME]

SELECT [TABELA DE CLIENTES].[NOME], [NOTAS FISCAIS].[MATRICULA] FROM [TABELA DE CLIENTES] LEFT JOIN 
[NOTAS FISCAIS] ON [TABELA DE CLIENTES].CPF = [NOTAS FISCAIS].CPF

-> RIGHT JOIN
select col from table1 right join table2 on table1.col = table2.col;
select col from table1 right join table2 
on table1.col = table2.col 
where table1.col is null;

SELECT DISTINCT [TABELA DE CLIENTES].[NOME], [NOTAS FISCAIS].[MATRICULA] FROM [NOTAS FISCAIS] RIGHT JOIN 
 [TABELA DE CLIENTES] ON [TABELA DE CLIENTES].CPF = [NOTAS FISCAIS].CPF

-> FULL JOIN
SELECT [TABELA DE VENDEDORES].BAIRRO, [TABELA DE VENDEDORES].[NOME],  
[TABELA DE CLIENTES].BAIRRO, [TABELA DE CLIENTES].[NOME] FROM
[TABELA DE VENDEDORES] FULL JOIN [TABELA DE CLIENTES] ON 
[TABELA DE VENDEDORES].BAIRRO = [TABELA DE CLIENTES].BAIRRO

-> CROSS JOIN
SELECT [TABELA DE VENDEDORES].BAIRRO, [TABELA DE CLIENTES].BAIRRO FROM
[TABELA DE VENDEDORES] CROSS JOIN [TABELA DE CLIENTES] 

-> UNION
SELECT DISTINCT [TABELA DE CLIENTES].BAIRRO FROM [TABELA DE CLIENTES]
UNION
SELECT DISTINCT [TABELA DE VENDEDORES].BAIRRO FROM [TABELA DE VENDEDORES]

-> UNION ALL
SELECT DISTINCT [TABELA DE CLIENTES].BAIRRO FROM [TABELA DE CLIENTES]
UNION ALL
SELECT DISTINCT [TABELA DE VENDEDORES].BAIRRO FROM [TABELA DE VENDEDORES]

SELECT DISTINCT [TABELA DE CLIENTES].[BAIRRO], [TABELA DE CLIENTES].[NOME] FROM [TABELA DE CLIENTES]
UNION ALL
SELECT DISTINCT [TABELA DE VENDEDORES].BAIRRO, [TABELA DE VENDEDORES].[NOME] FROM [TABELA DE VENDEDORES]

SELECT DISTINCT [TABELA DE CLIENTES].[BAIRRO], [TABELA DE CLIENTES].[NOME], 'CLIENTE' FROM [TABELA DE CLIENTES]
UNION ALL
SELECT DISTINCT [TABELA DE VENDEDORES].BAIRRO, [TABELA DE VENDEDORES].[NOME], 'VENDEDOR' FROM [TABELA DE VENDEDORES]

-> SUB CONSULTAS
SELECT NOME, BAIRRO FROM [TABELA DE CLIENTES]
WHERE BAIRRO IN (SELECT BAIRRO FROM [TABELA DE VENDEDORES])

SELECT NOVA_CONSULTA.EMBALAGEM, NOVA_CONSULTA.MAX_PRECO
FROM (SELECT EMBALAGEM, MAX([PREÇO DE LISTA]) AS MAX_PRECO FROM [TABELA DE PRODUTOS] GROUP BY EMBALAGEM)
NOVA_CONSULTA
WHERE NOVA_CONSULTA.MAX_PRECO <= 5

-> VIEWS
-> query view called VW_EMBALAGENS
SELECT EMBALAGEM, MAX([PREÇO DE LISTA]) AS MAX_PRECO FROM [TABELA DE PRODUTOS] GROUP BY EMBALAGEM

-> using view
SELECT * FROM [dbo].[VW_EMBALAGENS]

SELECT NOVA_CONSULTA.EMBALAGEM, NOVA_CONSULTA.MAX_PRECO
FROM VW_EMBALAGENS NOVA_CONSULTA
WHERE NOVA_CONSULTA.MAX_PRECO <= 5
